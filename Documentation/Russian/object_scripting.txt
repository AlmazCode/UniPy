В UniPy вы можете писать два типа скриптов: общие скрипты, управляющие всей программой, и скрипты, настроенные для управления отдельными объектами. Давайте создадим скрипт, который назначает случайный цвет объекту при запуске. Вот как это делается:

```python
import random

class random_color:
    def __init__(self):
        ...

    def Start(self):
        self.this.color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
```

В этом скрипте мы импортируем необходимый модуль и определяем класс. Обратите внимание, что имя класса должно совпадать с именем скрипта, иначе произойдет ошибка. В методе `__init__` мы оставляем его пустым, а в методе `Start` назначаем цвет. `self.this` хранит ссылку на объект, к которому применяется скрипт.

Чтобы скрипт управлял нашим объектом, нам нужно перейти к объекту в редакторе и указать имя скрипта в компоненте "script". Если ваш скрипт находится в папке (например, "scripts"), используйте точки в пути: folder.script_name.

Давайте рассмотрим еще один сценарий: перемещение объекта вдоль оси x на 's' пикселей каждые 'n' секунд. Реализация выглядит следующим образом:

```python
class move:
    def __init__(self):
        self.n = 1
        self.s = 12
        self._tick = 0

    def Start(self):
        self.n *= 60

    def Update(self):
        self._tick += 1
        if self._tick == self.n:
            self.this.x += self.s
            self._tick = 0
```

В этом скрипте `__init__` устанавливает переменные, `Start` переводит секунды в кадры, а `Update` обрабатывает логику. При присоединении этого скрипта к объекту в инспекторе предоставляются поля для ввода значений `n` и `s`. Помните, что переменные, начинающиеся с "_", нельзя редактировать в инспекторе.

Понимая эти структуры скриптов, вы можете эффективно контролировать поведение объектов и создавать настраиваемые взаимодействия в своей игре.