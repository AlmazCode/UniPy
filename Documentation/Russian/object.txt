Объект в UniPy представляет собой фундаментальный элемент, который можно разместить в игровой сцене и взаимодействовать с другими объектами. Для упрощения манипулирования объектами в редакторе было введено несколько редактируемых компонентов.

Следующие компоненты объекта могут быть изменены в редакторе:

- `x`: Координата по оси X, определяющая позицию объекта на игровой сцене.
- `y`: Координата по оси Y, определяющая позицию объекта на игровой сцене.
- `width`: Ширина объекта.
- `height`: Высота объекта.
- `angle`: Угол, под которым объект отображается на экране.
- `bodyType`: Тип тела объекта: None (обычный объект), dynamic (физическое тело), static (статическое тело, например, стена), kinematic (как None, но динамические объекты могут проверять столкновения с ним).
- `transparent`: Уровень прозрачности объекта.
- `render`: Если False, объект не будет отображаться на экране.
- `flipX`: Если True, объект будет горизонтально отражен.
- `flipY`: Если True, объект будет вертикально отражен.
- `image`: Изображение, которое будет отображаться на объекте.
- `cx`: Центрирование по оси X в конкретных позициях: right, left, center, objX(ObjectName), objCX(objectName).
- `cy`: Центрирование по оси Y в конкретных позициях: top, bottom, center, objY(ObjectName), objCY(objectName).
- `useFullAlpha`: Если True, изображение объекта будет использовать полный альфа-канал.
- `script`: Сохраняет скрипты, управляющие объектом (разделенные запятыми).
- `color`: Цвет объекта.
- `layer`: Слой рисования для объекта.
- `tag`: Тег объекта для фильтрации или поиска.
- `useCamera`: Если True, объект будет отображаться из камеры.

Помните, что центрирование объекта происходит только при запуске. Чтобы выполнить повторное центрирование на основе параметров, вызовите функции в коде: `setPos` (right, left, top, bottom, centerx, centery) и `setPosObject` (objX, objY).

UniPy предоставляет события для объектов, такие как нажатие и отпускание объекта. Эти события могут быть обработаны с помощью соответствующих функций.

- `onPressed`: Вызывается, когда объект нажат.
- `onUnPressed`: Вызывается, когда объект отпущен.

Пример:

```python
import UniPy as up

button = up.GetObj("bt")

def _onPressed():
    up.log("button has been pressed")
def _onReleased():
    up.log("button has been released")

button.onPressed = _onPressed
button.onUnPressed = _onReleased
```

Используйте `pressed()`, чтобы проверить, был ли объект нажат в текущем кадре. Например:

```python
def Update():
    if player.pressed():
        player.x += 1
```

Этот метод позволяет эффективно управлять объектами и интерактивными элементами пользовательского интерфейса.

У объекта есть функции `onCollided` и `onUnCollided`, аналогичные `onPressed` и `onUnPressed`.

Также переменные `leftCollided`, `rightCollided`, `topCollided` и `bottomCollided` хранят информацию о столкновении. `collidedObject` хранит объект, участвующий в столкновении.

Понимание этих параметров позволяет эффективно управлять объектами и настраивать игру. Изменяйте параметры через код или используйте редактор для упрощенного создания объектов и более быстрой разработки игр.