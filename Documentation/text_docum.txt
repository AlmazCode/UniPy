A text object in UniPy is an entity that can be placed on the game scene and interact with other objects.

The list of parameters available for editing in a text object includes:

    x: the X-coordinate that defines the position of the text object on the game scene.
    y: the Y-coordinate that defines the position of the text object on the game scene.
    
    text: the text to be displayed on the object.
    
    fontSize: the font size of the text.
    font: the font used to display the text.
    
    color: the color of the text.
    
    transparent: the transparency of the text.
    
    angle: the angle at which the object is displayed on the screen.
    
    textCentering: text centering on specific sides: left - align to the left, centerx - align to the center, right - align to the right.
    
    render: if the value of this parameter is False, the object will not be displayed on the screen.
    
    flipX: if the value of this parameter is True, the object will be horizontally flipped.
    flipY: if the value of this parameter is True, the object will be vertically flipped.
    
    richText: if the value of this parameter is True, the text will support a multi-color system.
    
    cx: object centering along the X-axis on specific sides: right - center from the right side of the screen, left - center from the left side, center - center from the screen center, objX(ObjectName) - center from the X-axis position of another object, objCX(objectName) - center from the central X-axis position of another object.
    
    cy: object centering along the Y-axis on specific sides: top - center from the top of the screen, bottom - center from the bottom, center - center from the screen center, objY(ObjectName) - center from the Y-axis position of another object, objCY(objectName) - center from the central Y-axis position of another object.
    
    script - stores scripts that will manage the object, specify scripts separated by commas
    
    layer: the layer on which the object will be drawn.
    
    tag: object tag. will be useful for filtering or searching for objects in the code.
    
    useCamera: if True, but the object will be displayed from the camera.
    
    smooth: if True, then the text will be displayed anti-aliased, otherwise more pixelated.
    
Furthermore, the object will only be centered at startup! To re-center the object based on its parameters, you will need to call a function in the code. There are two functions available: setPos: right, left, top, bottom, centerx, centery, and setPosObject: objX, objY.

One of the notable features of this engine is its support for multiline text. To split the text into multiple lines, you can use the special newline character "\n".

For example, if we want to display the following text on two lines:
"Hello, world!
This is a multiline text."

We can input it into the object's text property as follows:
"Hello, world!\nThis is a multiline text."

This way, our text will be displayed on two lines, and after the word "world", a newline character will be added, creating a new line for the next part of the text.

Using multiline text can be very useful when creating game objects that contain long descriptions, dialogues, instructions, or other information. Working with such text becomes more convenient and straightforward thanks to the ability to break the text into multiple lines.

Multi-color system:

Another feature of this engine is the support for multiple colors in text. To use this feature, you need to use tags. To indicate the start of a tag, you need to write a dollar sign "$", and then in parentheses in dictionary format, specify the text color in RGB. For example:
$(255, 0, 0)Hello, $(0, 255, 255)World!
In this example, the word "Hello" will be in red, and the word "World!" will be in turquoise.

Understanding these parameters allows for efficient control of text objects in the engine and customization of their appearance and behavior in the game. Parameters can be edited manually or using the editor's capabilities, which speeds up the process of creating game objects and overall game development.